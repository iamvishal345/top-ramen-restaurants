{"version":3,"sources":["components/HOC/item-view-by-year.hoc.jsx","components/search/search.component.jsx","components/rating/rating.component.jsx","components/item-card/item-card.component.jsx","components/item-view/item-view.component.jsx","components/navigation/navigation.component.jsx","components/item-view-by-condition/item-view-by-condition.component.jsx","App.js","components/HOC/item-view-by-country.hoc.jsx","serviceWorker.js","index.js"],"names":["WrappedComponent","Search","searchText","handleSearchTextChange","className","type","name","id","placeholder","value","onChange","e","target","Rating","stars","Fragment","map","num","key","height","width","points","style","fill","ItemCard","Brand","Country","Stars","Style","Variety","rank","title","isNaN","ItemView","restaurantsList","restaurant","i","Navigation","useState","toggleDropdown","setToggleDropdown","onClick","to","activeClassName","ItemViewByCondition","Object","keys","sort","a","b","objKey","ItemViewByYearContainer","resListByYear","forEach","topTen","otherProps","split","year","ItemViewByCountryContainer","resListByCountry","ItemViewByCountry","App","setRestaurantsList","useEffect","fetch","then","res","json","catch","err","console","log","exact","path","render","filter","rest","toLowerCase","indexOf","Boolean","window","location","hostname","match","ReactDOM","StrictMode","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.a1b5d36a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const ItemViewByYear = (WrappedComponent) => ({ restaurantsList }) => {\r\n  let resListByYear = {};\r\n  restaurantsList.forEach(({ \"Top Ten\": topTen, ...otherProps }) => {\r\n    if (topTen !== \"NaN\") {\r\n      const [year, rank] = topTen.split(\" #\");\r\n      if (!resListByYear[year])\r\n        resListByYear[year] = [{ ...otherProps, rank: rank }];\r\n      else\r\n        resListByYear[year] = [\r\n          ...resListByYear[year],\r\n          {\r\n            ...otherProps,\r\n            rank: rank,\r\n          },\r\n        ];\r\n      resListByYear[year].sort((a, b) => a.rank - b.rank);\r\n    }\r\n  });\r\n  return <WrappedComponent restaurantsList={resListByYear} />;\r\n};\r\n","import React from \"react\";\r\nimport \"./search.styles.scss\";\r\nexport const Search = ({ searchText, handleSearchTextChange }) => (\r\n  <div className=\"search-container\">\r\n    <input\r\n      type=\"text\"\r\n      name=\"search\"\r\n      id=\"search\"\r\n      placeholder=\"Search...\"\r\n      value={searchText}\r\n      onChange={(e) => handleSearchTextChange(e.target.value)}\r\n    />\r\n  </div>\r\n);\r\n","import React from \"react\";\r\n\r\nexport const Rating = ({ stars }) => (\r\n  <React.Fragment>\r\n    {[0, 1, 2, 3, 4, 5].map((num) => (\r\n      <svg key={num} height=\"21\" width=\"22\">\r\n        <polygon\r\n          points=\"10,1 4,19 19,7 1,7 16,19\"\r\n          style={num <= stars ? { fill: \"lime\" } : { fill: \"grey\" }}\r\n        />\r\n        Sorry, your browser does not support inline SVG.\r\n      </svg>\r\n    ))}\r\n  </React.Fragment>\r\n);\r\n","import React from \"react\";\r\nimport \"./item-card.styles.scss\";\r\nimport { Rating } from \"../rating/rating.component\";\r\nexport const ItemCard = ({\r\n  Brand,\r\n  Country,\r\n  Stars,\r\n  Style,\r\n  \"Top Ten\": TopTen,\r\n  Variety,\r\n  rank,\r\n}) => (\r\n  <div className=\"item-card\">\r\n    <div className=\"top-bar\">\r\n      <i className=\"country pad-5\">{Country}</i>\r\n      {rank ? <i className=\"rank-badge pad-5\">{rank}</i> : null}\r\n    </div>\r\n    <h1 className=\"title\">{Brand}</h1>\r\n    <div className=\"rating\" title={isNaN(Stars) ? \"NA\" : Stars}>\r\n      <Rating stars={Stars} />\r\n    </div>\r\n    <div className=\"style pad-5\">\r\n      {Style === \"Nan\" || Style === \"NaN\" ? \"Any\" : Style}\r\n    </div>\r\n    <div className=\"variety pad-5\">{Variety}</div>\r\n  </div>\r\n);\r\n\r\n// Brand: \"MAMA\"\r\n// Country: \"Myanmar\"\r\n// Stars: 5\r\n// Style: \"Pack\"\r\n// Top Ten: \"2016 #10\"\r\n// Variety: \"Instant Noodles Coconut Milk Flavour\"\r\n","import React from \"react\";\r\nimport \"./item-view.styles.scss\";\r\nimport { ItemCard } from \"../item-card/item-card.component\";\r\nexport const ItemView = ({ restaurantsList }) => (\r\n  <div className=\"item-card-container\">\r\n    {restaurantsList.map((restaurant, i) => (\r\n      <ItemCard key={i} {...restaurant} />\r\n    ))}\r\n  </div>\r\n);\r\n","import React, { useState } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nimport \"./navigation.component.scss\";\r\nexport const Navigation = () => {\r\n  const [toggleDropdown, setToggleDropdown] = useState(false);\r\n  return (\r\n    <div className=\"nav-container\">\r\n      <button\r\n        className=\"icon\"\r\n        onClick={() => setToggleDropdown(!toggleDropdown)}\r\n      >\r\n        &#9776;\r\n      </button>\r\n      <ul className={`nav-bar ${toggleDropdown ? \"toggle-display\" : \"\"}`}>\r\n        <li>\r\n          <NavLink to=\"/all\" className=\"nav-item\">\r\n            All Restaurants\r\n          </NavLink>\r\n        </li>\r\n        <li>\r\n          <NavLink to=\"/top\" className=\"nav-item\" activeClassName=\"active\">\r\n            Top Restaurants\r\n          </NavLink>\r\n        </li>\r\n        <li>\r\n          <NavLink to=\"/country\" className=\"nav-item\" activeClassName=\"active\">\r\n            Restaurants by Country\r\n          </NavLink>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./item-view-by-condition.styles.scss\";\r\nimport { ItemView } from \"../item-view/item-view.component\";\r\nexport const ItemViewByCondition = ({ restaurantsList }) => {\r\n  return (\r\n    <div className=\"view-by-condition-container\">\r\n      {Object.keys(restaurantsList)\r\n        .sort((a, b) => b - a)\r\n        .map((objKey) => {\r\n          return (\r\n            <React.Fragment key={objKey}>\r\n              <h1 className=\"header\">{objKey}</h1>\r\n              <ItemView restaurantsList={restaurantsList[objKey]} />\r\n            </React.Fragment>\r\n          );\r\n        })}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.scss\";\nimport { Search } from \"./components/search/search.component\";\nimport { ItemView } from \"./components/item-view/item-view.component\";\nimport { Navigation } from \"./components/navigation/navigation.component\";\nimport { ItemViewByCondition } from \"./components/item-view-by-condition/item-view-by-condition.component\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport { ItemViewByYear } from \"./components/HOC/item-view-by-year.hoc\";\nimport { ItemViewByCountry } from \"./components/HOC/item-view-by-country.hoc\";\nconst ItemViewByYearContainer = ItemViewByYear(ItemViewByCondition);\nconst ItemViewByCountryContainer = ItemViewByCountry(ItemViewByCondition);\nfunction App() {\n  const [searchText, handleSearchTextChange] = useState(\"\");\n  const [restaurantsList, setRestaurantsList] = useState([]);\n  useEffect(() => {\n    fetch(\"http://starlord.hackerearth.com/TopRamen\")\n      .then((res) => {\n        return res.json();\n      })\n      .then((res) => {\n        setRestaurantsList(res);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n    return () => {};\n  }, []);\n  return (\n    <div className=\"container\">\n      <nav>\n        <Navigation />\n      </nav>\n      <header>\n        <Search\n          searchText={searchText}\n          handleSearchTextChange={handleSearchTextChange}\n        />\n      </header>\n      <main>\n        <Switch>\n          <Route exact path=\"/\">\n            {\" \"}\n            <Redirect to=\"/all\" />\n          </Route>\n          <Route\n            path=\"/all\"\n            render={() => (\n              <ItemView\n                restaurantsList={restaurantsList.filter((rest) => {\n                  return (\n                    rest.Brand.toLowerCase().indexOf(searchText.toLowerCase()) >\n                    -1\n                  );\n                })}\n              />\n            )}\n          ></Route>\n          <Route\n            path=\"/top\"\n            render={() => (\n              <ItemViewByYearContainer\n                restaurantsList={restaurantsList.filter((rest) => {\n                  return (\n                    rest.Brand.toLowerCase().indexOf(searchText.toLowerCase()) >\n                    -1\n                  );\n                })}\n              />\n            )}\n          ></Route>\n          <Route\n            path=\"/country\"\n            render={() => (\n              <ItemViewByCountryContainer\n                restaurantsList={restaurantsList.filter((rest) => {\n                  return (\n                    rest.Brand.toLowerCase().indexOf(searchText.toLowerCase()) >\n                    -1\n                  );\n                })}\n              />\n            )}\n          ></Route>\n        </Switch>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\r\n\r\nexport const ItemViewByCountry = (WrappedComponent) => ({\r\n  restaurantsList,\r\n}) => {\r\n  let resListByCountry = {};\r\n  restaurantsList.forEach(({ Country, ...otherProps }) => {\r\n    if (!resListByCountry[Country])\r\n      resListByCountry[Country] = [{ ...otherProps, Country: Country }];\r\n    else\r\n      resListByCountry[Country] = [\r\n        ...resListByCountry[Country],\r\n        { ...otherProps, Country: Country },\r\n      ];\r\n  });\r\n  return <WrappedComponent restaurantsList={resListByCountry} />;\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename=\"/top-ramen-restaurants\">\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}